lines(density(baseball$OBP), lty = "dashed")
hist(baseball$OBP, probability = TRUE)#, ylim = c(0, 0.17))
lines(x = mean(baseball$OBP), lty = "dashed")
hist(baseball$OBP, probability = TRUE)#, ylim = c(0, 0.17))
lines(density(baseball$OBP), lty = "dashed")
lines(x = mean(baseball$OBP), lty = "dashed")
x = mean(baseball$OBP)
mean(baseball$OBP)
hist(baseball$OBP, probability = TRUE)#, ylim = c(0, 0.17))
lines(density(baseball$OBP), lty = "dashed")
lines(x = mean(baseball$OBP), y = c(0,1))
hist(baseball$OBP, probability = TRUE)#, ylim = c(0, 0.17))
lines(density(baseball$OBP), lty = "dashed")
lines(x = rep(mean(baseball$OBP),2), y = c(0,1))
library(MASS)
head(cats)
hist(cats$Hwt)
quantile(cats$Hwt, c(0.25, 0.5, 0.75))
plot(ecdf(cats$Hwt))
hist(cats$Hwt, probability = TRUE, ylim = c(0, 0.17))
lines(density(cats$Hwt), lty = "dashed")
library(ggplot2)
ggplot(cats) +
geom_histogram(aes(x = Hwt, y = ..density..)) +
geom_density(aes(x = Hwt))
hist(cats$Hwt, probability = TRUE, ylim = c(0, 0.17))
lines(density(cats$Hwt), lty = "dashed")
hist(cats$Hwt, probability = TRUE)#, ylim = c(0, 0.17))
lines(density(cats$Hwt), lty = "dashed")
hist(cats$Hwt, probability = TRUE)#, ylim = c(0, 0.17))
lines(density(cats$Hwt), lty = "dashed")
hist(baseball$OBP, probability = TRUE)#, ylim = c(0, 0.17))
lines(density(baseball$OBP), lty = "dashed")
lines(x = rep(mean(baseball$OBP),2), y = c(0,1))
hist(baseball$OBP, probability = TRUE)#, ylim = c(0, 0.17))
lines(density(baseball$OBP), lty = "dashed")
lines(x = rep(mean(baseball$OBP),2), y = c(0,1))
hist(baseball$OBP, probability = TRUE)#, ylim = c(0, 0.17))
lines(density(baseball$OBP), lty = "dashed")
lines(x = rep(mean(baseball$OBP),2), y = c(0,10))
hist(baseball$OBP, probability = TRUE)#, ylim = c(0, 0.17))
lines(density(baseball$OBP), lty = "dashed")
lines(x = rep(mean(baseball$OBP),2), y = c(0,10), lty = "dashed")
hist(baseball$OBP, probability = TRUE, ylim = c(0, 10.5))
lines(density(baseball$OBP), lty = "dashed")
lines(x = rep(mean(baseball$OBP),2), y = c(0,10), lty = "dashed")
library(ggplot2)
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP)) +
geom_abline(aes(x = mean(OBP), y = 10))
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP)) +
geom_line(aes(x = mean(OBP), y = 10))
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP)) +
geom_line(aes(x = rep(mean(OBP),2), y = c(0,10)))
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP)) +
geom_line(aes(x = rep(mean(OBP),2), y = c(0,10)))
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP)) +
geom_line(x = rep(mean(OBP),2), y = c(0,10))
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP)) +
geom_abline(aes(x = rep(mean(OBP),2), y = c(0,10)))
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP)) +
geom_hline(aes(x = rep(mean(OBP),2), y = c(0,10)))
?geom_hline
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP)) +
geom_hline(aes(yintercept = ..density..), mean(OBP))
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP)) +
geom_hline(aes(yintercept = ..density..), mean(baseball$OBP))
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP)) +
geom_hline(aes(mean(baseball$OBP)))
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP)) +
geom_hline(aes(yintercept = OBP),mean(baseball$OBP))
mean_wt <- data.frame(cyl = c(4, 6, 8), wt = c(2.28, 3.11, 4.00))
p + geom_hline(aes(yintercept = wt), mean_wt)
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
facet_wrap(~ cyl)
mean_wt <- data.frame(cyl = c(4, 6, 8), wt = c(2.28, 3.11, 4.00))
p + geom_hline(aes(yintercept = wt), mean_wt)
mean(baseball$OBP)
mean_OBP =
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP)) +
geom_hline(aes(xintercept = OBP),mean(baseball$OBP))
mean_OBP =
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP)) +
geom_vline(xintercept = mean(baseball$OBP))
mean_OBP =
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP)) +
geom_vline(xintercept = mean(baseball$OBP))
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP)) +
geom_vline(xintercept = mean(baseball$OBP))
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP)) +
geom_vline(xintercept = mean(baseball$OBP))
cat.MM   <- gam.MMest(cats$Hwt)
# Class Script, Lecture 10
# November 10
#install.packages("MASS")
library(MASS)
head(cats)
hist(cats$Hwt)
quantile(cats$Hwt, c(0.25, 0.5, 0.75))
plot(ecdf(cats$Hwt))
hist(cats$Hwt, probability = TRUE, ylim = c(0, 0.17))
lines(density(cats$Hwt), lty = "dashed")
library(ggplot2)
ggplot(cats) +
geom_histogram(aes(x = Hwt, y = ..density..)) +
geom_density(aes(x = Hwt))
# Estimation Example
samp_size <- 100
samp1     <- rnorm(samp_size, mean = 10, sd = 3)
mean_est1 <- mean(samp1)
n          <- 500
samp_means <- rep(NA, n)
for (i in 1:n) {
samp_means[i] <- mean(rnorm(samp_size, mean = 10, sd = 3))
}
ggplot(data.frame(samp = samp_means)) +
geom_histogram(aes(x = samp, y = ..density..)) +
geom_density(aes(x = samp))
# Sample Distribution of the Sample Mean
samp_size  <- c(5, 10, 25, 50, 100)
n          <- 500
samp_means <- cbind(rep(NA, n*length(samp_size)),
rep(NA, n*length(samp_size)))
for (j in 1:length(samp_size)) {
for (i in 1:n) {
row <- (j-1)*n + i
samp_means[row, 1] <- mean(rnorm(samp_size[j], mean = 10, sd = 3))
samp_means[row, 2] <- samp_size[j]
}
}
colnames(samp_means) <- c("Values", "SampleSize")
ggplot(data.frame(samp_means)) +
geom_histogram(aes(x = Values, y = ..density..)) +
geom_density(aes(x = Values)) +
facet_wrap(~SampleSize)
# Sample Distribution of the Sample Variance
samp_size  <- c(5, 10, 25, 50, 100)
n          <- 500
samp_means <- cbind(rep(NA, n*length(samp_size)),
rep(NA, n*length(samp_size)))
colnames(samp_means) <- c("Values", "SampleSize")
for (j in 1:length(samp_size)) {
for (i in 1:n) {
row <- (j-1)*n + i
samp_means[row, 1] <- var(rnorm(samp_size[j], mean = 10, sd = 3))
samp_means[row, 2] <- samp_size[j]
}
}
ggplot(data.frame(samp_means)) +
geom_histogram(aes(x = Values, y = ..density..)) +
geom_density(aes(x = Values)) +
facet_wrap(~SampleSize)
# Method of Moments
# a = \mu_1^2/(\mu_2 - \mu_1^2)
# s = (\mu_2 - \mu_1^2)/ \mu_1
# v = \mu_2 - \mu_1^2
gam.MMest <- function(data) {
#estimates \hat{a} and \hat{s} that best fit the data
m <- mean(data)
v <- var(data)
return(c(a = m^2/v, s = v/m))
}
cat.MM   <- gam.MMest(cats$Hwt)
gam_args <- list(shape = cat.MM[1], scale = cat.MM[2])
ggplot(cats) +
geom_histogram(aes(x = Hwt, y = ..density..)) +
geom_density(aes(x = Hwt), linetype = "dashed") +
stat_function(aes(x = Hwt), fun = dgamma, args = gam_args, color = "red")
gam.mean <- function(a, s) {a*s}
gam.var  <- function(a, s) {a*s^2}
gam.diff <- function(params, data) {
a <- params[1]
s <- params[2]
return((mean(data) - gam.mean(a,s))^2 + (var(data) - gam.var(a,s))^2)
}
nlm(gam.diff, c(19, 1), data = cats$Hwt)
cat.MM
nlm(gam.diff, c(19, 1), data = cats$Hwt)$estimate
# Checking Your Estimator
gam.MMest(rgamma(100, shape = 19, scale = 45))
gam.MMest(rgamma(10000, shape = 19, scale = 45))
gam.MMest(rgamma(1000000, shape = 19, scale = 45))
# Maximum Likelihood Estimator
gam.ll <- function(params, data) {
# Input: parameter vector (length2, shape and scale)
# Input: data
a <- params[1]
s <- params[2]
return(sum(dgamma(data, shape = a, scale = s, log = TRUE)))
}
nlm(gam.ll, c(19, 1), data = cats$Hwt)
neg.gam.ll <- function(params, data) {
# Input: parameter vector (length2, shape and scale)
# Input: data
a <- params[1]
s <- params[2]
return(-sum(dgamma(data, shape = a, scale = s, log = TRUE)))
}
nlm(neg.gam.ll, c(19, 1), data = cats$Hwt)
ll_min <- nlm(neg.gam.ll, c(19, 1), data = cats$Hwt)$minimum
cat.MM
mm_min <- neg.gam.ll(cat.MM, cats$Hwt)
cat.MLE <- nlm(neg.gam.ll, c(19, 1), data = cats$Hwt)$estimate
MLE_args <- list(shape = cat.MLE[1], scale = cat.MLE[2])
MM_args <- list(shape = cat.MM[1], scale = cat.MM[2])
ggplot(cats) +
geom_histogram(aes(x = Hwt, y = ..density..)) +
geom_density(aes(x = Hwt), linetype = "dashed") +
stat_function(aes(x = Hwt), fun = dgamma, args = MM_args, color = "red") +
stat_function(aes(x = Hwt), fun = dgamma, args = MLE_args, color = "blue")
# Q-Q Plot
# Model (theoretical) quantiles
qgamma(c(0.01, 0.05, 0.95, 0.99), shape = cat.MM[1], scale = cat.MM[2])
# Empirical (data) quantiles
quantile(cats$Hwt, c(0.01, 0.05, 0.95, 0.99))
a <- cat.MM[1]
s <- cat.MM[2]
theory_quant <- qgamma((1:99)/100, shape = a, scale = s)
qqplot(cats$Hwt, theory_quant)
abline(0, 1, col = "red")
# Bootstrap
cat.MM <- gam.MMest(cats$Hwt)
cat.MM
# A single bootstrap resample
n      <- nrow(cats)
resamp <- sample(1:n, n, replace = TRUE)
boot.samp <- cats$Hwt[resamp]
head(sort(boot.samp))
head(sort(cats$Hwt))
gam.MMest(boot.samp)
# 1000 bootstrap resamples
B          <- 1000
param_ests <- matrix(NA, nrow = B, ncol = 2)
colnames(param_ests) <- c("a", "s")
for (b in 1:B) {
resamp         <- sample(1:n, n, replace = TRUE)
boot.samp      <- cats$Hwt[resamp]
param_ests[b,] <- gam.MMest(boot.samp)
}
param_ests <- data.frame(param_ests)
ggplot(param_ests) +
geom_histogram(aes(x = a)) +
geom_vline(xintercept = mean(a), col = "red")
ggplot(param_ests) +
geom_histogram(aes(x = s)) +
geom_vline(xintercept = mean(s), col = "red")
bootstrap.a <- mean(param_ests$a)
bootstrap.s <- mean(param_ests$s)
bootstrap.a
# Use bootstrap samples to estimate the standard error of our estimates
sd(param_ests$a)
sd(param_ests$s)
# CI
CI.a <- quantile(param_ests$a, probs = c(0.025, 0.975))
ggplot(param_ests) +
geom_histogram(aes(x = a)) +
geom_vline(xintercept = mean(a), col = "red") +
geom_vline(xintercept = CI.a[1], col = "red", linetype = "dashed") +
geom_vline(xintercept = CI.a[2], col = "red", linetype = "dashed")
# Convince ourselves that hte bootstrap works.
set.seed(1)
samp_size <- 100
samp1     <- rnorm(samp_size, mean = 10, sd = 3)
mean_est1 <- mean(samp1)
# Calulate bootstrap resamples
n <- length(samp1)
B <- 1000
boot.means <- rep(NA, B)
for (b in 1:B) {
resamp_data   <- sample(samp1, n, replace = TRUE)
boot.means[b] <- mean(resamp_data)
}
mean(boot.means)
sd(boot.means) # Close to 3/10?
ggplot() + geom_histogram(aes(x = boot.means))
MM_args
beta_args <- list(alpha = 100*this.mean, beta = 100 - alpha)
this.mean <- mean(baseball$OBP)
beta_args <- list(alpha = 100*this.mean, beta = 100 - alpha)
beta_args <- list(alpha = 100*this.mean, beta = 100 - 100*this.mean)
this.mean <- mean(baseball$OBP)
beta_args <- list(alpha = 100*this.mean, beta = 100 - 100*this.mean)
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP)) +
geom_vline(xintercept = mean(baseball$OBP)) +
stat_function(aes(x = OBP), fun = dbeta, args = beta_args, color = "red")
ggplot(cats) +
geom_histogram(aes(x = Hwt, y = ..density..)) +
geom_density(aes(x = Hwt), linetype = "dashed") +
stat_function(aes(x = Hwt), fun = dgamma, args = gam_args, color = "red")
this.mean <- mean(baseball$OBP)
beta_args <- list(alpha = 100*this.mean, beta = 100 - 100*this.mean)
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP), linetype = "dashed") +
geom_vline(xintercept = mean(baseball$OBP)) +
stat_function(aes(x = OBP), fun = dbeta, args = beta_args, color = "red")
this.mean <- mean(baseball$OBP)
beta_args <- list(alpha = 100*this.mean, beta = 100 - 100*this.mean)
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP), linetype = "dashed") +
geom_vline(xintercept = mean(baseball$OBP)) +
stat_function(aes(x = OBP), fun = dbeta, args = beta_args, color = "red")
beta_args
this.mean <- mean(baseball$OBP)
beta_args <- list(alpha = 100*this.mean, beta = 100 - 100*this.mean)
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP), linetype = "dashed") +
geom_vline(xintercept = mean(baseball$OBP)) +
stat_function(aes(x = OBP), fun = dbeta(), args = beta_args, color = "red")
?dbeta
this.mean <- mean(baseball$OBP)
beta_args <- list(shape1 = 100*this.mean, shape2 = 100 - 100*this.mean)
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP), linetype = "dashed") +
geom_vline(xintercept = mean(baseball$OBP)) +
stat_function(aes(x = OBP), fun = dbeta, args = beta_args, color = "red")
gam.mean <- function(a, s) {a*s}
gam.var  <- function(a, s) {a*s^2}
gam.diff <- function(params, data) {
a <- params[1]
s <- params[2]
return((mean(data) - gam.mean(a,s))^2 + (var(data) - gam.var(a,s))^2)
}
nlm(gam.diff, c(19, 1), data = cats$Hwt)
mean(cats$Hwt)
(mean(cats$Hwt) / var(cats$Hwt))^2
beta.mean <- function(a, b) {return(a/(a+b))}
beta.var <- function(a, b) {return(a*b/((a+b)^2*(a+b+1)))}
beta.diff <- function(params, data) {
a <- params[1]
b <- params[2]
return((mean(data) - beta.mean(a, b))^2
+ (var(data) - beta.var(a, b))^2)
}
nlm(beta.diff, c(19, 1), data = baseball$OBP)[1:3]
fit_arg <- nlm(beta.diff, c(19, 1), data = baseball$OBP)$estimate
qbeta(probs = seq(1, 99)/100, shape = fit_arg[1], scale = fit_arg[2])
fit_arg[1]
qbeta(probs = seq(1, 99)/100, shape1 = fit_arg[1], shape2 = fit_arg[2])
qbeta(seq(1, 99)/100, shape1 = fit_arg[1], shape2 = fit_arg[2])
quantile(baseball$OBP, probs = seq(1, 99)/100)
plot(ecdf(pbeta(baseball$OBP, shape1 = fit_arg[1], shape2 = fit_arg[2])),
main = "Calibration of gamma distribution for cat hearts")
qqplot(cats$Hwt, theory_quant)
abline(0, 1, col = "red")
abline(0, 1, col = "red")
plot(ecdf(pbeta(baseball$OBP, shape1 = fit_arg[1], shape2 = fit_arg[2])),
main = "Calibration of beta distribution for OBP")
abline(0, 1, col = "red")
fit_arg <- nlm(beta.diff, c(19, 1), data = baseball$OBP)$estimate
# # Model quantiles
# qbeta(seq(1, 99)/100, shape1 = fit_arg[1], shape2 = fit_arg[2])
# Data quantiles:
quantile(baseball$OBP, probs = seq(1, 99)/100)
a <- fit_arg[1]
s <- fit_arg[2]
qqplot(baseball, qbeta((1:99)/100, shape1 = a, shape2 = s),
ylab = "Theoretical Quantiles")
fit_arg <- nlm(beta.diff, c(19, 1), data = baseball$OBP)$estimate
# # Model quantiles
# qbeta(seq(1, 99)/100, shape1 = fit_arg[1], shape2 = fit_arg[2])
# Data quantiles:
quantile(baseball$OBP, probs = seq(1, 99)/100)
a <- fit_arg[1]
s <- fit_arg[2]
qqplot(baseball$OBP, qbeta((1:99)/100, shape1 = a, shape2 = s),
ylab = "Theoretical Quantiles")
abline(0, 1, col = "red")
?gam.MMest
neg.beta.ll <- function(params, data) {
a <- params[1]
b <- params[2]
return(-sum(dbeta(data, shape1 = a, shape2 = b, log = TRUE)))
}
nlm(neg.beta.ll, c(19, 1), data = baseball$OBP)$minimum
nlm(neg.beta.ll, c(19, 1), data = baseball$OBP)$estimate
neg.beta.ll(fit_arg, baseball$OBP)
neg.beta.ll(fit_arg, baseball$OBP)
nlm(neg.beta.ll, c(19, 1), data = baseball$OBP)$minimum
gam.MMest <- function(data) {
#estimates \hat{a} and \hat{s} that best fit the data
m <- mean(data)
v <- var(data)
return(c(a = m^2/v, s = v/m))
}
cat.MM   <- gam.MMest(cats$Hwt)
cat.MM
beta.mean <- function(a, b) {return(a/(a+b))}
beta.var <- function(a, b) {return(a*b/((a+b)^2*(a+b+1)))}
beta.MMest <- function(data) {
#estimates \hat{\alpha} and \hat{\beta} that best fit the data
m <- mean(data)
v <- var(data)
alpha <- m/v*(m*(1-m)-v)
beta <- (1-m)/v*(m*(1-m)-v)
return(c(alpha, beta))
}
OBP.MM   <- beta.MMest(baseball$OBP)
OBP.MM
beta.MMest <- function(data) {
#estimates \hat{\alpha} and \hat{\beta} that best fit the data
m <- mean(data)
v <- var(data)
alpha <- m/v*(m*(1-m)-v)
beta <- (1-m)/v*(m*(1-m)-v)
return(c(alpha, beta))
}
OBP.MM   <- beta.MMest(baseball$OBP)
beta_args <- list(shape1 = OBP.MM[1], shape2 = OBP.MM[2])
beta.MMest <- function(data) {
#estimates \hat{\alpha} and \hat{\beta} that best fit the data
m <- mean(data)
v <- var(data)
alpha <- m/v*(m*(1-m)-v)
beta <- (1-m)/v*(m*(1-m)-v)
return(c(alpha, beta))
}
OBP.MM   <- beta.MMest(baseball$OBP)
beta_args <- list(shape1 = OBP.MM[1], shape2 = OBP.MM[2])
ggplot(baseball) +
geom_histogram(aes(x = OBP, y = ..density..)) +
geom_density(aes(x = OBP), linetype = "dashed") +
stat_function(aes(x = OBP), fun = dbeta, args = beta_args, color = "red")
neg.beta.ll <- function(params, data) {
a <- params[1]
b <- params[2]
return(-sum(dbeta(data, shape1 = a, shape2 = b, log = TRUE)))
}
nlm(neg.beta.ll, beta_args, data = baseball$OBP)$minimum
beta_args
a <- beta_args[1]
neg.beta.ll <- function(params, data) {
a <- params[1]
b <- params[2]
return(-sum(dbeta(data, shape1 = a, shape2 = b, log = TRUE)))
}
a <- beta_args[1]
b <- beta_args[2]
nlm(neg.beta.ll, c(a,b), data = baseball$OBP)$minimum
c(a,b)
a
neg.beta.ll <- function(params, data) {
a <- params[1]
b <- params[2]
return(-sum(dbeta(data, shape1 = a, shape2 = b, log = TRUE)))
}
a <- beta_args$shape1
b <- beta_args$shape2
nlm(neg.beta.ll, c(a,b), data = baseball$OBP)$minimum
nlm(neg.beta.ll, c(a,b), data = baseball$OBP)$estimate
neg.beta.ll <- function(params, data) {
a <- params[1]
b <- params[2]
return(-sum(dbeta(data, shape1 = a, shape2 = b, log = TRUE)))
}
beta_args
a <- beta_args$shape1
b <- beta_args$shape2
nlm(neg.beta.ll, c(a,b), data = baseball$OBP)$minimum
nlm(neg.beta.ll, c(a,b), data = baseball$OBP)$estimate
quantile(baseball$OBP, probs = seq(1, 99)/100)
a <- beta_args[1]
b <- beta_args[2]
qqplot(baseball$OBP, qbeta((1:99)/100, shape1 = a, shape2 = b),
ylab = "Theoretical Quantiles")
quantile(baseball$OBP, probs = seq(1, 99)/100)
a <- beta_args[1]
b <- beta_args[2]
qqplot(baseball$OBP, qbeta((1:99)/100, shape1 = a, shape2 = b),
ylab = "Theoretical Quantiles")
quantile(baseball$OBP, probs = seq(1, 99)/100)
a <- beta_args$shape1
b <- beta_args$shape2
qqplot(baseball$OBP, qbeta((1:99)/100, shape1 = a, shape2 = b),
ylab = "Theoretical Quantiles")
abline(0, 1, col = "red")
